AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation template for ECS Application Service
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the security groups should be deployed to
  environment:
    Description: Environment to be deployed
    Type: String
    Default: dev
  owner:
    Description: Owner of this stack
    Type: String
  project:
    Description: Project
    Type: String
  ECSSecurityGroup:
    Description: Comma separated list of security groups
    Type: AWS::EC2::SecurityGroup::Id
  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1
  ServiceName:
    Description: The Name of the service to deploy
    Type: String
  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String
  PrivateSubnetA:
    Type: AWS::EC2::Subnet::Id
    Description: List of an existing subnet IDs to use for the load balancer and auto
      scaling group
  PrivateSubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: List of an existing subnet IDs to use for the load balancer and auto
      scaling group
  ContainerCpu:
    Type: String
    Default: '256'
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: String
    Default: '1024'
    Description: How much memory in megabytes to give the container
  ContainerPort:
    Type: Number
    Default: 80
  Repository:
    Type: String
    Description: ECR Repository name
  RepositoryTag:
    Type: String
    Description: ECR Tag to deploy
    Default: latest
  TGPort:
    Type: String
    Default: '80'
  HealthyThresholdCount:
    Type: Number
    Default: 2
  UnhealthyThresholdCount:
    Type: Number
    Default: 2
  HealthCheckTimeoutSeconds:
    Type: Number
    Default: 5
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 10
  PathPattern:
    Type: String
  Healthcheck:
    Type: String
    Default: '/actuator/health'
  MaxCapacity:
    Type: String
    Default: '10'
  MinCapacity:
    Type: String
    Default: '1'
  LoadBalancerListener:
    Type: String
  Priority:
    Type: String
    Default: '10'
  ECSname:
    Type: String
Conditions:
  NotDev:
    Fn::Not:
    - Fn::Equals:
      - Ref: environment
      - dev
Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ecs-task-${AWS::StackName}
      Path: "/"
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
      - PolicyName:
          Fn::Sub: ecs-service-${AWS::StackName}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:DescribeTargetGroups
            - elasticloadbalancing:DescribeTargetHealth
            - elasticloadbalancing:RegisterTargets
            Resource: "*"
      - PolicyName:
          Fn::Sub: ecr-${AWS::StackName}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ecr:GetAuthorizationToken
            Resource: "*"
            Effect: Allow
          - Action:
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:CompleteLayerUpload
            - ecr:GetDownloadUrlForLayer
            - ecr:InitiateLayerUpload
            - ecr:PutImage
            - ecr:UploadLayerPart
            Resource: "*"
            Effect: Allow
      - PolicyName:
          Fn::Sub: ecs-logs-${AWS::StackName}
        PolicyDocument:
          Statement:
          - Action:
            - logs:Create*
            - logs:PutLogEvents
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
      - PolicyName:
          Fn::Sub: ecs-s3-${AWS::StackName}
        PolicyDocument:
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource: arn:aws:s3:::*
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: Cluster
      ServiceName:
        Ref: ServiceName
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LaunchType: FARGATE
      LoadBalancers:
      - TargetGroupArn:
          Ref: TargetGroup
        ContainerName:
          Ref: ServiceName
        ContainerPort:
          Ref: ContainerPort
      DesiredCount:
        Ref: DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Ref: ECSSecurityGroup
          Subnets:
          - Ref: PrivateSubnetA
          - Ref: PrivateSubnetB
      TaskDefinition:
        Ref: TaskDefinition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Ref: ServiceName
      NetworkMode: awsvpc
      Cpu:
        Ref: ContainerCpu
      Memory:
        Ref: ContainerMemory
      RequiresCompatibilities:
      - FARGATE
      ContainerDefinitions:
      - Name:
          Ref: ServiceName
        Essential: true
        Image:
          Fn::Sub: "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${RepositoryTag}"
        PortMappings:
        - ContainerPort:
            Ref: ContainerPort
          HostPort:
            Ref: ContainerPort
          Protocol: HTTP
        Cpu:
          Ref: ContainerCpu
        Memory:
          Ref: ContainerMemory
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: AWS::StackName
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix:
              Ref: ServiceName
      TaskRoleArn:
        Ref: TaskRole
      ExecutionRoleArn:
        Ref: TaskRole
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Ref: AWS::StackName
      RetentionInDays: 60
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:
        Fn::Sub: "${ECSname}-${environment}-tg"
      TargetType: ip
      VpcId:
        Ref: VPC
      Port:
        Ref: TGPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-302
      HealthCheckPath:
        Fn::Sub: "${PathPattern}/${Healthcheck}"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount:
        Ref: HealthyThresholdCount
      UnhealthyThresholdCount:
        Ref: UnhealthyThresholdCount
      HealthCheckTimeoutSeconds:
        Ref: HealthCheckTimeoutSeconds
      HealthCheckIntervalSeconds:
        Ref: HealthCheckIntervalSeconds
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 30
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Ref: LoadBalancerListener
      Priority:
        Ref: Priority
      Conditions:
      - Field: path-pattern
        Values:
        - Fn::Sub: "${PathPattern}/*"
      Actions:
      - TargetGroupArn:
          Ref: TargetGroup
        Type: forward
  ScalableTarget:
    Condition: NotDev
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity:
        Ref: MaxCapacity
      MinCapacity:
        Ref: MinCapacity
      ResourceId:
        Fn::Sub: service/${Cluster}/${Service}
      RoleARN:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/ecsAutoscaleRole
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ScaleAutoPolicy:
    Condition: NotDev
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
    - ScalableTarget
    Properties:
      PolicyName:
        Fn::Sub: "${AWS::StackName}-${environment}-${project}-sp"
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        DisableScaleIn: 'false'
        ScaleInCooldown: '60'
        ScaleOutCooldown: '60'
        TargetValue: '85'
